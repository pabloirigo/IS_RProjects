rm(list=ls())
#read matrix
mat <- scan("C:/Users/Nacho/Downloads/SI/Code Templates-20180305T171600Z-001/Code Templates/data/sudoku-1.txt" , sep=",")
x<-matrix(1:2,nrow=7, ncol=7)
x<-matrix(nrow=7, ncol=7)
x
x<-matrix(1:7,nrow=7, ncol=7)
x
y<-c("right","left")
is.matrix(y)
x[]
#datamat<-(()
#is.matrix(x)
#x[]
demo("graphics")
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
# problem$state.initial = <Insert code here>
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
}
C
demo()
demo("graphics")
demo(graphics.off())
demo
demo(graphics)
x<-matrix(nrow=7, ncol=7)
is.matrix(x)
x[]
> x<-1:10
> matrix(x,nrow=2,ncol=5)
x<-1:10
matrix(x,nrow=2,ncol=5)
x<-1:4 matrix(x,3,8)
x<-1:4
matrix(x,3,8)
y<-("right")
x<-matrix(y,nrow=7, ncol=7)
is.matrix(x)
x[]
y<-("right","left")
y<-("right":"left")
x<-matrix(y,nrow=7, ncol=7)
is.matrix(x)
x[]
y<-("right")
c<-("left")
x<-matrix(y,c,nrow=7, ncol=7)
is.matrix(x)
x[]
pies<-c("right","left")
x<-matrix(y,c,nrow=7, ncol=7)
x<-matrix(c,nrow=7, ncol=7)
is.matrix(x)
x[]
pies<-c("right","left")
x<-matrix(c,nrow=7, ncol=7)
is.matrix(x)
x[]
x<-matrix(1:2,nrow=7, ncol=7)
x<-matrix(1:2,nrow=8, ncol=8)
is.matrix(x)
x[]
pies<-c("right","left")
x<-matrix(c,nrow=8, ncol=8)
is.matrix(x)
x[]
pies<-c("right","left")
x<-matrix(c,nrow=8, ncol=8)
x[c(1,3), c(1,5)]<-"right"
is.matrix(x)
x[]
pies<-("left")
x<-matrix(c,nrow=8, ncol=8)
x[c(1,3), c(1,5)]<-"right"
is.matrix(x)
x[]
x[c(1,7), c(1,5)]<-"right"
is.matrix(x)
x[]
initpies<-"left"
x<-matrix(initpies,nrow=8, ncol=8)
x[c(1,3,5,7), c(1,5)]<-"right"
is.matrix(x)
x[]
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
initpies<-"left"
x<-matrix(initpies,nrow=8, ncol=8)
x[c(1,3,5,7), c(1,3,5,7)]<-"right"
is.matrix(x)
x[]
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
initpies<-"left"
x<-matrix(initpies,nrow=8, ncol=8)
x[c(1,3,5,7), c(1,2,3,4,5,6,7)]<-"right"
is.matrix(x)
x[]
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
initpies<-"left"
x<-matrix(initpies,nrow=7, ncol=7)
x
x[c(1,3,5,7), c(1,2,3,4,5,6,7)]<-"right"
x
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
initpies<-"left"
x<-matrix(initpies,nrow=7, ncol=7)
x
x[c(1,3,5,7), c(1,3,5,7)]<-"right"
x
initpies<-"left"
x<-matrix(initpies,nrow=7, ncol=7)
x
x[c(2,4,6), c(1,3,5,7)]<-"right"
x
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
initpies<-"left"
x<-matrix(initpies,nrow=7, ncol=7)
x
x[c(1,3,5,7), c(2,4,6)]<-"right"
x[c(2,4,6), c(1,3,5,7)]<-"right"
x
x[c(1,3,5,7), c(2,4,6)]<-right
initpies<-"left"
x<-matrix(initpies,nrow=7, ncol=7)
x
#x[c(2,4,6), c(1,3,5,7)]<-"right"
x[1,1]<-"right"
x
#x[c(2,4,6), c(1,3,5,7)]<-"right"
x[(1,1),(2,5)]<-"right"
x[1,1]<-"right"
x[1,1]<-"right"x
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
initpies<-"left"
x<-matrix(initpies,nrow=7, ncol=7)
x
x[c(1), c(2,4,5,6)]<-"right"
x[c(2), c(1,3,4)]<-"right"
x[c(3), c(2,4,6)]<-"right"
x[c(4), c(1,2,3,4,5,7)]<-"right"
x[c(5), c(4,7)]<-"right"
x[c(6), c(1,2,3,7)]<-"right"
x[c(7), c(2,4,6)]<-"right"
x
x<-matrix(initpies,nrow=7, ncol=7)
x
x[c(1), c(2,4,5,6)]<-"r"
x[c(2), c(1,3,4)]<-"r"
x[c(3), c(2,4,6)]<-"r"
x[c(4), c(1,2,3,4,5,7)]<-"r"
x[c(5), c(4,7)]<-"r"
x[c(6), c(1,2,3,7)]<-"r"
x[c(7), c(2,4,6)]<-"r"
View(x)
View(x)
problem$state.initial = <c(1,7)>
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
problem$state.initial = <c(1,7)>
# problem$state.final   = <Insert code here or remove line if not needed>
# problem$actions.possible = <Insert code here>
# problem$name = <Insert code here>
# problem$<aditional info> = <Insert code here>
return(problem)
problem$state.initial = <c(1,7)>
problem$state.initial = c(1,7)
problem$state.initial = c(1,7)
problem = list()
problem$state.initial = c(1,7)
