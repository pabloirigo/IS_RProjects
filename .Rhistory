# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
# ADDITIONAL FUNCTIONS (add any used method/problem here)
source("../TheFeetMaze/problems/problem template.R")
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method/problem here)
source("../TheFeetMaze/problems/problem template.R")
install.packages("glue")
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
install.packages("ggplot2")
install.packages("gridExtra")
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
install.packages(c("glue", "stringi"))
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
graphics.off()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
# LIBRARIES (add any needed library here)
library(rstudioapi)
library(ggplot2)
library(gridExtra)
# ADDITIONAL FUNCTIONS (add any used method/problem here)
source("../TheFeetMaze/problems/problem template.R")
# And here, there are additional (needed) functions
source("../TheFeetMaze/methods/Breadth_First_Search.R")
source("../TheFeetMaze/methods/Analyze_Results.R")
source("../TheFeetMaze/methods/Depth_First_Search.R")
# =======================================================================
# Solving of the problem (you have to adapt it)
#problem   = initialize.problem("<ANY_PARAMETER_IF_NEEDED>")
res1 = method.Breath_First_Search(problem)
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# Configuring the Environment
rm(list=ls())
cat("\014")
initFeet<-"L"
x<-matrix(initFeet,nrow=7, ncol=7)
x[c(1), c(2,4,5,6)]<-"R"
x[c(2), c(1,3,4)]<-"R"
x[c(3), c(2,4,6)]<-"R"
x[c(4), c(1,2,3,4,5,7)]<-"R"
x[c(5), c(4,7)]<-"R"
x[c(6), c(1,2,3,7)]<-"R"
x[c(7), c(2,4,6)]<-"R"
x
x(state)
problem$x(state)
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
problem$state.initial = c(7,1)
problem$columns = ncol(x)
problem$row = nrow(x)
problem$state.final   = c(1,7)
problem$actions.possible =data.frame(direction=c("Up","Down","Rigth","Left"),cost=1)
problem$name = "The Feet Maze"
problem$matrix = x
problem$upWall = upWall
problem$downWall = downWall
problem$leftWall = leftWall
problem&rightWall = rightWall
return(problem)
}
state
x
x(state)
x(row, col)
x[row, col]
#Going UP
if (action == "Up" && upWall(state) == "true"){
if(upWall(state) == "true" && state[row, col] != state[row-1, col] && row=!1){
result = row!=1
}
}
result
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
dir()
initFeet<-"L"
x<-matrix(initFeet,nrow=7, ncol=7)
x[c(1), c(2,4,5,6)]<-"R"
x[c(2), c(1,3,4)]<-"R"
x[c(3), c(2,4,6)]<-"R"
x[c(4), c(1,2,3,4,5,7)]<-"R"
x[c(5), c(4,7)]<-"R"
x[c(6), c(1,2,3,7)]<-"R"
x[c(7), c(2,4,6)]<-"R"
x
initTrue = T
leftWall<-matrix(initTrue,nrow=7,ncol=7)
#leftWall[c(1), c()]<-"false"
leftWall[c(2), c(3)]<- F
leftWall[c(3), c(3, 6)]<- F
#leftWall[c(4), c()]<-"false"
leftWall[c(5), c(5)]<- F
leftWall[c(6), c(4)]<- F
#leftWall[c(7), c()]<-"false"
leftWall
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
initFeet<-"L"
x<-matrix(initFeet,nrow=7, ncol=7)
x[1, c(2,4,5,6)]<-"R"
x[2, c(1,3,4)]<-"R"
x[3, c(2,4,6)]<-"R"
x[4, c(1,2,3,4,5,7)]<-"R"
x[5, c(4,7)]<-"R"
x[6, c(1,2,3,7)]<-"R"
x[7, c(2,4,6)]<-"R"
x
initTrue = T
leftWall<-matrix(initTrue,nrow=7,ncol=7)
#leftWall[c(1), c()]<-"false"
leftWall[2, 3]<-F
leftWall[3, c(3, 6)]<-F
#leftWall[c(4), c()]<-"false"
leftWall[5, 5]<-F
leftWall[6, 4]<-F
#leftWall[c(7), c()]<-"false"
leftWall
rightWall<-matrix(initTrue,nrow=7,ncol=7)
#rightWall[c(1), c()]<-"false"
rightWall[2, 2]<-F
rightWall[3, c(2,5)]<-F
#rightWall[c(4), c()]<-"false"
rightWall[5, 4]<-F
rightWall[6, 3]<-F
#rightWall[c(7), c()]<-"false"
rightWall
downWall<-matrix(initTrue,nrow=7,ncol=7)
downWall[1, 3]<-F
#downWall[c(2), c()]<-"false"
downWall[3, 6]<-F
#downWall[c(4), c()]<-"false"
downWall[5, 3]<-F
#downWall[c(6), c()]<-"false"
#downWall[c(7), c()]<-"false"
downWall
upWall<-matrix(initTrue,nrow=7,ncol=7)
#upWall[c(1), c()]<-"false"
upWall[2, 3]<-F
#upWall[c(3), c()]<-"false"
upWall[4, 6]<-F
#upWall[c(5), c()]<-"false"
upWall[6, 3]<-F
#upWall[c(7), c()]<-"false"
upWall
# This function must return a list with the information needed to
# solve the problem.
# (Depending on the problem, it should receive or not parameters)
initialize.problem = function(){
problem = list()
problem$state.initial = c(7,1)
problem$columns = ncol(x)
problem$row = nrow(x)
problem$state.final   = c(1,7)
problem$actions.possible =data.frame(direction=c("Up","Down","Rigth","Left"),cost=1)
problem$name = "The Feet Maze"
problem$matrix = x
problem$upWall = upWall
problem$downWall = downWall
problem$leftWall = leftWall
problem&rightWall = rightWall
return(problem)
}
initialize.problem()
# 2. If you use a function of a certain package, do not forget to include the
#    corresponding call to the "library ()" function
# 3. Do not forget to comment on the code, especially those non-trivial commands
#    (remember that part of the rating depends on the cleaning of the code)
# 4. It is strongly recommended to test any implemented function in order to
#    check for its proper operation
# =======================================================================
# (This is a general code, you must adapt it)
# =======================================================================
# With the following two commands we clean the work environment and the console
rm(list = ls())
cat("\014")
